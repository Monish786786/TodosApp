{"version":3,"sources":["component/todos.js","user-pages/user-page1.js","component/users.js","App.js","reportWebVitals.js","index.js"],"names":["App","useState","savedTodos","localStorage","getItem","JSON","parse","todos","setTodos","todo","setTodo","isEditing","setIsEditing","currentTodo","setCurrentTodo","useEffect","setItem","stringify","className","Card","Body","onSubmit","e","preventDefault","id","updatedTodo","updatedItem","map","handleUpdateTodo","htmlFor","name","type","placeholder","value","text","onChange","target","console","log","Button","variant","onClick","length","trim","style","color","handleEditClick","removeItem","filter","handleDeleteClick","CustomersData1","fetchdata","axios","get","state","currentpage","then","response","data","customers","setState","buttons","i","total_pages","push","pageno","fetchmoreData","index","this","customer","first_name","email","button","React","Component","CustomersData","handleClickPage1","handleClickPage2","backgroundImage","to","path","component","TodosApp","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba26e413.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\nimport { Button, Card, Form } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function App() {\r\n  const [todos, setTodos] = useState(() => {\r\n    const savedTodos = localStorage.getItem(\"todos\");\r\n    if (savedTodos) {\r\n      return JSON.parse(savedTodos);\r\n    } else {\r\n      return [];\r\n    }\r\n  });\r\n  const [todo, setTodo] = useState(\"\");\r\n  // boolean state to know if we are editing (this will let us display\r\n  // different inputs based on a condition (conditional rendering)\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  // object state to set so we know which todo item we are editing\r\n  const [currentTodo, setCurrentTodo] = useState({});\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  function handleInputChange(e) {\r\n    setTodo(e.target.value);\r\n  }\r\n\r\n  // function to get the value of the edit input and set the new state\r\n  function handleEditInputChange(e) {\r\n    // set the new state value to what's currently in the edit input box\r\n    setCurrentTodo({ ...currentTodo, text: e.target.value });\r\n    console.log(currentTodo);\r\n  }\r\n\r\n  function handleFormSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (todo !== \"\") {\r\n      setTodos([\r\n        ...todos,\r\n        {\r\n          id: todos.length + 1,\r\n          text: todo.trim()\r\n        }\r\n      ]);\r\n    }\r\n\r\n    setTodo(\"\");\r\n  }\r\n\r\n  function handleEditFormSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    handleUpdateTodo(currentTodo.id, currentTodo);\r\n  }\r\n\r\n  function handleDeleteClick(id) {\r\n    const removeItem = todos.filter((todo) => {\r\n      return todo.id !== id;\r\n    });\r\n    setTodos(removeItem);\r\n  }\r\n\r\n  // function to edit a todo item\r\n  function handleUpdateTodo(id, updatedTodo) {\r\n    // here we are mapping over the todos array - the idea is check if the todo.id matches the id we pass into the function\r\n    // if the id's match, use the second parameter to pass in the updated todo object\r\n    // otherwise just use old todo\r\n    const updatedItem = todos.map((todo) => {\r\n      return todo.id === id ? updatedTodo : todo;\r\n    });\r\n    // set editing to false because this function will be used inside a onSubmit function - which means the data was submited and we are no longer editing\r\n    setIsEditing(false);\r\n    // update the todos state with the updated todo\r\n    setTodos(updatedItem);\r\n  }\r\n\r\n  // function to handle when the \"Edit\" button is clicked\r\n  function handleEditClick(todo) {\r\n    // set editing to true\r\n    setIsEditing(true);\r\n    // set the currentTodo to the todo item that was clicked\r\n    setCurrentTodo({ ...todo });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <Card>\r\n        <Card.Body>\r\n      {/* We need to conditionally render different inputs based on if we are in editing mode */}\r\n      {isEditing ? (\r\n        // if we are editing - display the edit todo input\r\n        // make sure to add the handleEditFormSubmit function in the \"onSubmit\" prop\r\n        <form onSubmit={handleEditFormSubmit}>\r\n          {/* we've added an h2 element */}\r\n          <h2>Edit Todo</h2>\r\n          {/* also added a label for the input */}\r\n          <label htmlFor=\"editTodo\">Edit todo: </label>\r\n          {/* notice that the value for the update input is set to the currentTodo state */}\r\n          {/* also notice the handleEditInputChange is being used */}\r\n          <input\r\n            name=\"editTodo\"\r\n            type=\"text\"\r\n            placeholder=\"Edit todo\"\r\n            value={currentTodo.text}\r\n            onChange={handleEditInputChange}\r\n          />\r\n          {/* here we added an \"update\" button element - use the type=\"submit\" on the button which will still submit the form when clicked using the handleEditFormSubmit function */}\r\n          <Button variant=\"outline-success\" type=\"submit\">✓</Button>\r\n          {/* here we added a \"Cancel\" button to set isEditing state back to false which will cancel editing mode */}\r\n          <Button variant=\"outline-danger\" onClick={() => setIsEditing(false)}>✕</Button>\r\n        </form>\r\n      ) : (\r\n        // if we are not editing - display the add todo input\r\n        // make sure to add the handleFormSubmit function in the \"onSubmit\" prop\r\n        <form onSubmit={handleFormSubmit}>\r\n          {/* we've added an h2 element */}\r\n          <h2 style={{color:'red'}}>Add Todo</h2>\r\n          {/* also added a label for the input */}\r\n          <label htmlFor=\"todo\" style={{color:'black'}}>Add todo: </label>\r\n          {/* notice that the value is still set to the todo state */}\r\n          {/* also notice the handleInputChange is still the same */}\r\n          <Card>\r\n            <Card.Body>\r\n          <input\r\n            name=\"todo\"\r\n            type=\"text\"\r\n            placeholder=\"Create a new todo\"\r\n            value={todo}\r\n            onChange={handleInputChange}\r\n          />\r\n          </Card.Body>\r\n          </Card>\r\n          {/* here we just added a \"Add\" button element - use the type=\"submit\" on the button which will still submit the form when clicked using the handleFormSubmit function */}\r\n          <Button type=\"submit\">Add</Button>\r\n        </form>\r\n      )}\r\n\r\n      <ul className=\"todo-list\">\r\n        {todos.map((todo) => (\r\n          <li key={todo.id}>\r\n            {todo.text}\r\n            {/* we are passing the entire todo object to the handleEditClick function*/}\r\n            <Button  variant=\"outline-warning\" onClick={() => handleEditClick(todo)}>✎,</Button>\r\n            <Button variant=\"outline-danger\" onClick={() => handleDeleteClick(todo.id)}>✕</Button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport { Button} from 'react-bootstrap';\r\n\r\nclass CustomersData1 extends React.Component {\r\n    constructor() {\r\n        super() \r\n        //we have declared the state over here\r\n        this.state = {\r\n            customers:[],\r\n            pageno:[],\r\n            currentpage:1\r\n        }\r\n    }\r\n//we are fetching the data in the fetchData function\r\n fetchdata = ()=>{\r\n    axios.get(`https://reqres.in/api/users?page=${this.state.currentpage}` \r\n    )\r\n  .then(response => {\r\n\r\n      console.log(response.data, \"Real data\")  \r\n      const customers = response.data\r\n      // let page=response.data.data.length/6\r\n      // console.log(page, \"page\")\r\n      \r\n      console.log(customers, \"yyy\")\r\n      this.setState({customers:customers})\r\n      \r\n//declaring the buttons over her accotding to the pages\r\n  let buttons = []\r\n  for(let i=0; i<response.data.total_pages; i++){\r\n      buttons.push(`page ${i+1}`)\r\n     \r\n  }\r\n  this.setState({pageno:buttons})\r\n  })\r\n}    \r\n\r\n    componentDidMount() {\r\n        this.fetchdata()   \r\n        \r\n    }\r\n\r\n//fetching up of the more data as of the next page\r\nfetchmoreData=(index)=>{\r\n    console.log(this.state.currentpage, \"index123\")\r\nthis.setState({currentpage:index+1})\r\nconsole.log(this.state.currentpage, \"index12345\")\r\nthis.fetchdata() \r\n}\r\n   \r\n\r\n    render() {\r\n\r\n        //rendering is taking place\r\n       console.log(this.state.customers.data, \"Monish\")\r\n       console.log(this.state.pageno, \"tyu\")\r\n        \r\n        return (\r\n           \r\n            <div>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>name</th>\r\n                            <th>email</th>\r\n                            \r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                    \r\n                        {\r\n                            this.state.customers.length !=0 && this.state.customers.data.map((customer,i)=>{\r\n                                return(\r\n                                <tr>\r\n                                    \r\n                                <td>{customer.id}</td>\r\n                                <td>{customer.first_name}</td>\r\n                                <td>{customer.email}</td>\r\n                                \r\n                        \r\n                                    </tr>\r\n                                )\r\n                            \r\n                                })\r\n                            \r\n                            }\r\n                        \r\n                    </tbody>\r\n                   \r\n                </table>\r\n                <p></p>\r\n               \r\n               {\r\n                   this.state.pageno.map((button, index)=>{\r\n                       return(\r\n                           <Button onClick={()=>{this.fetchmoreData(index)}}>{button}</Button>\r\n                       )\r\n                   })\r\n               }\r\n               \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CustomersData1","import React from 'react'\r\n\r\nimport CustomersData1 from '../user-pages/user-page1';\r\nimport CustomersData2 from '../user-pages/user-page2';\r\n\r\nclass CustomersData extends React.Component {\r\n    // constructor() {\r\n    //     super() \r\n    //     this.state = {\r\n    //         customers:[]\r\n    //     }\r\n    // }\r\n\r\n    \r\n\r\n    // componentDidMount() {\r\n    //     axios.get('https://reqres.in/api/users?page=1' \r\n    //       )\r\n    //     .then(response => {\r\n    //         console.log(response.data, \"Real data\")\r\n    //         const customers = response.data\r\n    //         this.setState({customers})\r\n    //     })\r\n    // }\r\n\r\n\r\n handleClickPage1=()=>{\r\n    <CustomersData1/>\r\n}\r\n   \r\nhandleClickPage2=()=>{\r\n    <CustomersData2/>\r\n}\r\n\r\n    render() {\r\n       \r\n        \r\n        return (\r\n\r\n            // <BrowserRouter>\r\n            //   <Link to='/page1'><Button variant=\"secondary\">Page 1</Button></Link>  \r\n            //     <Link to='/page2'><Button variant=\"secondary\" >Page 2</Button></Link>\r\n\r\n\r\n            //     <Route path=\"/page1\" component={CustomersData1} exact={true}/>\r\n            //     <Route path=\"/page2\" component={CustomersData2} exact={true}/>\r\n\r\n            // </BrowserRouter>\r\n            <>\r\n            <CustomersData1/>\r\n            </>\r\n               \r\n               \r\n                \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default CustomersData","\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom'\nimport './App.css';\nimport TodosApp from './component/todos';\nimport CustomersData  from './component/users';\nimport { Button} from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <div style={{ \n      backgroundImage: `url(\"https://www.shutterstock.com/image-vector/software-web-development-programming-concept-abstract-1122339353\")` \n    }}>\n    <BrowserRouter>\n    <Button variant=\"outline-success\"><Link to=\"/todos\">Todos App\n    </Link></Button>\n    <br></br>\n    <Button variant=\"outline-success\"><Link to=\"/customers\">Customers List</Link></Button>\n\n    <Switch>\n    <Route path=\"/todos\" component={TodosApp} exact={true} />\n\n    \n    <Route path=\"/customers\" component={CustomersData} exact={true} />\n\n    </Switch>\n    </BrowserRouter>\n    </div>\n    // <div className=\"App\">\n    //  {/* <TodosApp/> */}\n    //  <CustomerList/>\n    // </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}